# -*- coding: utf-8 -*-
"""CIS5570_H&MRecSys.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1paiVS2QFYT33BshsJqH2sVYzooLSxEnJ
"""

import pandas as pd #for dataframe computation
import numpy as np#for matrix computations
articles= pd.read_csv('articles.csv') 
articles.head()

articles.columns #to list out the names of all attributes of 'articles'

articles.info() #notice that the memory usage for 'articles' is 20.1 MB

"""Counting the number of distinct values in each attribute of the table 'articles'"""

#Counting the number of distinct values in each attribute of the table 'articles'
for i in articles.columns:
    print('{} '.format(i),len(articles[i].unique()))

articles.isna().sum() #checking for the presence of null values

articles.detail_desc.fillna(0, inplace=True)#replacing nulls with 0

articles.isna().sum() #checking if all the nulls have been replaced

articles.shape #(coulmns,rows) shape definition

"""Let's take a look at how the data is distributed this table articles

"""

#count of sections
import seaborn as sns
import matplotlib.pyplot as plt
fig, x = plt.subplots(figsize = (8,8))
x = sns.histplot(data=articles, x='index_group_name', color='firebrick')
x.set_xlabel('sections')
x.set_ylabel('count')
plt.show()

#counting the num of articles in each garment group
p, bx = plt.subplots(figsize = (15,12))
bx= sns.histplot(data=articles, y='garment_group_name', palette='Set2')
bx.set_xlabel('count')
bx.set_ylabel('garment group')
plt.show()

#number of articles in each department name 
temp = articles.groupby(["department_name"])["article_id"].nunique()
df = pd.DataFrame({'Department Name': temp.index,
                   'Articles': temp.values
                  })
total_depts = len(df['Department Name'].unique())
df = df.sort_values(['Articles'], ascending=False).head(20)
plt.figure(figsize = (16,6))
plt.title(f'Number of Articles per each Department (top 20 from total: {total_depts})')
sns.set_color_codes("colorblind")
s = sns.barplot(x = 'Department Name', y="Articles", data=df)
s.set_xticklabels(s.get_xticklabels(),rotation=90)
locs, labels = plt.xticks()
plt.show()

#calculating the distribution using a pie chart
df1= articles['index_group_name'].value_counts()
df2= articles['index_group_name'].unique().tolist()

plt.pie(df1,labels=df2, radius=1.5)
plt.show()
print((df1/sum(df1))*100)#printing the percentage values of each group of garment

"""Let's take a look and analyze the customers relation

"""

customers= pd.read_csv('customers.csv')
customers.head()

#taking a look at all the columns
customers.columns

customers.info()
#notice that this table is using up a space of 73.3+MB

customers.isna().sum() #checking null values

customers.fillna(0, inplace=True)#replacing nulls with 0

customers.isna().sum() #making sure all the null values are replaced with 0

customers.shape #look at how many rows and columns are in the customers.csv data

# finding the age distribution among the customers
p, bx = plt.subplots(figsize = (16,8))
sns.set_style("dark")
bx= sns.histplot(data=customers, x='age',bins=100, color='slateblue')
plt.title('Count of customer ages')
bx.set_xlabel('age')
bx.set_ylabel('count')
plt.show()

"""The ages between 20 and 30 are the age groups involved in shopping the most at H&M

We can now move on to the transactions data
"""

transactions= pd.read_csv('transactions_train.csv')

transactions.head()

transactions.info()
#this is using up 1.2+GB of machine data

#merging transactions and articles tables on 'article_id'
trans_articles= articles[['article_id', 'prod_name', 'product_type_name', 'product_group_name', 'index_name']]
trans_articles= transactions.merge(trans_articles, on='article_id', how='left')

#count of transactions per index name
p, x = plt.subplots(figsize = (16,8))
sns.set_style("dark")
x= sns.histplot(data=trans_articles, y='index_name',bins=100, color='mediumorchid')
plt.title('Count of transactions per index name')
x.set_xlabel('count')
x.set_ylabel('Index name')
plt.show()

#eliminate the aplha-numeric columns in order to make it viable for TF-IDF
art_req= articles[['article_id', 'prod_name',
       'product_type_name', 'product_group_name',
       'graphical_appearance_name', 'colour_group_name','perceived_colour_value_name', 
       'perceived_colour_master_name', 'department_name', 
       'index_code', 'index_name', 'index_group_name', 
       'section_name','garment_group_name', 'detail_desc']]
art_req.head()

art_req.shape

#removing all spaces in all individual columns
art_req['prod_name'].str.replace(" ","")
art_req['product_type_name'].str.replace(" ","")
art_req['product_group_name'].str.replace(" ","")
art_req['graphical_appearance_name'].str.replace(" ","")
art_req['colour_group_name'].str.replace(" ","")
art_req['perceived_colour_value_name'].str.replace(" ","")
art_req['perceived_colour_master_name'].str.replace(" ","")
art_req['department_name'].str.replace(" ","")
art_req['index_code'].str.replace(" ","")
art_req['index_name'].str.replace(" ","")
art_req['index_group_name'].str.replace(" ","")
art_req['section_name'].str.replace(" ","")
art_req['garment_group_name'].str.replace(" ","")
art_req['detail_desc'].str.replace(" ","")

art_req.head()#printing the df with all the spaces removed

#removing columns that has alpha-numeric attributes to make tf-idf computations
combined_columns= ['prod_name', 'product_type_name', 'product_group_name',
       'graphical_appearance_name', 'colour_group_name','index_name',
       'perceived_colour_value_name', 'perceived_colour_master_name',
       'department_name', 'index_name', 'index_group_name', 'section_name',
       'garment_group_name', 'detail_desc']
art_req['combined_article_desc'] = art_req[combined_columns].apply(lambda row: ' '.join(row.values.astype(str)), axis=1)

art_req.head()

#only taking article_id and combined_article_desc
art_fin = art_req[['article_id','combined_article_desc']]

art_fin.head()

#considering only 7k rows to lower computational strain
art_fin = art_fin.loc[:7000]

trans = transactions.loc[:7000]
trans

trans= transactions[transactions.customer_id.isin(trans['customer_id'])]

#merging transactions and the final articles table to generate user profiles
art_trans = pd.merge(art_fin, trans, on='article_id')

art_trans

#merge on customer_id to get user profiles
tot_trans = pd.merge(art_trans,customers,on='customer_id')

tot_trans

tot_trans.shape

"""Generating recommendations"""

#generating TF-IDF matrix using the combined article description attribute
from sklearn.feature_extraction.text import TfidfVectorizer

tf_idf = TfidfVectorizer(stop_words='english')

art_fin['combined_article_desc'] = art_fin['combined_article_desc'].fillna('')

tf_idf_matrix = tf_idf.fit_transform(art_fin['combined_article_desc'])

tf_idf_matrix.shape

print(tf_idf_matrix)

#using linerkernel to calculate cosine similarities
from sklearn.metrics.pairwise import linear_kernel
cos_similarity = linear_kernel(tf_idf_matrix, tf_idf_matrix) # cossim(a,b)= a.b/||a||.||b||
print(cos_similarity)

article_indices=pd.Series(art_fin.index, index=art_fin['article_id']).drop_duplicates()

#defining a function to enumerate and sort similarity scores
def sim_score(title):
    similar_indices = article_indices[title]
    similarityscores = list(enumerate(cos_similarity[similar_indices]))
    similarityscores = sorted(similarityscores, key=lambda x: x[1], reverse=True)
    similarityscores = similarityscores[:6]
    return similarityscores

#function for obtaining similar articles of a given article based on the cosine similarity
def recommend(title, cos_sim=cos_similarity):
    
    z=sim_score(title)
 
    art_idx = [a[0] for a in z]

 
    return art_fin['article_id'].iloc[art_idx]

#we get sll the articles purchased by each customer
def get_articles(c_id):
    art= tot_trans.loc[c_id==tot_trans['customer_id'], 'article_id']
    return art

#we get the list of recommendations on sn article purchased by a particular customer
reec=[]
def recommendations(c_id):
    a= get_articles(c_id)
    for artic in a:
        b=artic
        e=int(b)
        d= list(recommend (e))
        reec.append(d[0:6])
    return reec

#final recommendations based on the passed customer_id
reec=[]
def final_recommendations(art):
    for x in art:
        recommended_item=recommendations(x)
        print("The article recommended for "+str(x))
        for j in recommended_item:
            print("Recommendation for item "+str(j[0])+" is "+str(j[1:6])+"\n")
        print("\n")
        

customers = ["00402f4463c8dc1b3ee54abfdea280e96cd87320449eca8953eb06769a5c20d4"]
final_recommendations(customers)